worker_processes 1;

events {
    worker_connections 1024;
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    include /usr/local/openresty/nginx/conf/mime.types;
    default_type application/octet-stream;

    lua_package_path "/usr/local/openresty/lualib/?.lua;;";

    init_by_lua_block {
        cjson = require("cjson")
        require("resty.jwt")
        jwt_secret = "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAn6266r5IlWi0RoxgqNEYMtBYjGKrTp/nE9PGwIiue95LdbTlFu70MTqyozCippAk2CXMImd/SAM5GNDM4i06nDUUaRL4xRacprou5bGn8/HY7J1vpOWdvnSYVNWUYRNmYgVCkxiG6t4w5Jshgf7JvZrUlB1R0b/Ek0stPDstN2odRk9i3Z6mnrwszjurwf6Ps2sl9mX/EHaOJQrrZFS5+GmSilUcLYY9dGyCH6lpYzOkqjQIZArdZ47tgeN6vFEfMIyHjmvUfdQWmq0WgDJZfbHMWwk0cq3z78T85M1HbnAglPfGURt+5vF+3Nzbi1BdIw5v2EeqMK/lGqJZah65TQIDAQAB\n-----END PUBLIC KEY-----"
    }


    server {
        listen 80;
        server_name internal;

        location /users/token/ {
            proxy_pass http://users:8000/users/token/;
        }

        location /users/ {
            proxy_pass http://users:8000/users/;
        }

        location /rooms/ {
            proxy_pass http://rooms:8000/;
        }
        
        #location /exams/ {
        #    proxy_pass http://exams:8000/exams/;
        #}

        location /notifications/ {
            proxy_pass http://notifications:8000/notifications/;
        }
    }
    server {
        listen 8000;
        server_name external;

        location /users/token/ {
            proxy_pass http://users:8000/users/token/;
        }

        location /users/ {
            access_by_lua_block {
                local jwt = require("resty.jwt")
                local auth_header = ngx.var.http_authorization
                if auth_header==null then
                    ngx.status = 401
                    ngx.say("Unauthorized: ", err)
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end
                local verified, err = jwt:verify(jwt_secret, auth_header)
                if not verified then
                    ngx.status = 401
                    ngx.say("Unauthorized: ", err)
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end
            }
            proxy_pass http://users:8000/users/;
        }

        location /rooms/ {
            access_by_lua_block {
                local jwt = require("resty.jwt")
                local auth_header = ngx.var.http_authorization
                if auth_header==null then
                    ngx.status = 401
                    ngx.say("Unauthorized: ", err)
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end
                local verified, err = jwt:verify(jwt_secret, auth_header)
                if not verified then
                    ngx.status = 401
                    ngx.say("Unauthorized: ", err)
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end
            }
            proxy_pass http://rooms:8000/rooms/;
        }

        #location /exams/ {
        #    access_by_lua_block {
        #        local jwt = require("resty.jwt")
        #        local auth_header = ngx.var.http_authorization
        #        local verified, err = jwt:verify(jwt_secret, auth_header)
        #        if not verified then
        #            ngx.status = 401
        #            ngx.say("Unauthorized: ", err)
        #            ngx.exit(ngx.HTTP_UNAUTHORIZED)
        #        end
        #    }
        #    proxy_pass http://exams:8000/exams/;
        #}

        location /notifications/ {
            access_by_lua_block {
                local jwt = require("resty.jwt")
                local auth_header = ngx.var.http_authorization
                if auth_header==null then
                    ngx.status = 401
                    ngx.say("Unauthorized: ", err)
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end
                local verified, err = jwt:verify(jwt_secret, auth_header)
                if not verified then
                    ngx.status = 401
                    ngx.say("Unauthorized: ", err)
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end
            }
            proxy_pass http://notifications:8000/notifications/;
        }
    }
}